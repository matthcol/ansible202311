---
- name: Install App
  hosts: appservers
  become: yes
  tags: APP
  tasks:
    - name: Begin Install App
      ansible.builtin.debug:
        msg: "Begin Install app on {{ ansible_hostname }}"
    - name: create user interactif
      ansible.builtin.user:
        name: "{{ username }}"
        shell: /usr/bin/bash
    - name: create group service
      ansible.builtin.group:
        name: "{{ userservicename }}"
        gid: 998
    - name: create user service
      ansible.builtin.user:
        name: "{{ userservicename }}"
        group: "{{ userservicename }}"
        uid: 998
        shell: /usr/sbin/nologin
    - name: Install nginx server + jre Java
      ansible.builtin.apt:
        name: "{{ item }}"
        update_cache: yes
      loop:
        - nginx
        - openjdk-{{ javaversion }}-jre
    - name: nginx service stopped and disabled
      ansible.builtin.systemd:
        name: nginx
        state: stopped
        enabled: false
    - name: copy api artifact
      tags: ARTIFACT
      ansible.builtin.copy:
        src: ~/artifacts/movieapi-{{ javaversion }}.jar
        dest: /opt
        owner: "{{ userservicename }}"
        group: "{{ userservicename }}"
        mode: 0755 
    
    # deploy artifact: movieapi-[java version].jar

- name: Install Db
  hosts: dbserver
  become: yes
  tags: DB
  tasks:
    - name: Begin Install db
      ansible.builtin.debug:
        msg: "Begin Install db on {{ ansible_hostname }}"
    - name: add key repo postgresql
      ansible.builtin.apt_key:
        url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
        state: present
    - name: add repo postgresql
      ansible.builtin.apt_repository:
        repo: "deb https://apt.postgresql.org/pub/repos/apt  {{ ansible_distribution_release }}-pgdg main"
        state: present

    - name: install postgresql server + python driver
      ansible.builtin.apt:
        name: "{{ item }}"
        update_cache: yes
      loop:
        - postgresql-{{ postgresqlversion }}
        - python3-psycopg2

    # create db (dbmovie) + user db (movie/password):
    - name: PostgreSQL tasks
      become: yes
      become_user: postgres
      tags: PGTASK
      block:
        - name:  create db user
          community.postgresql.postgresql_user:
            name: "{{ dbuser }}"
            password: "{{ dbpassword }}"
        - name:  create db
          community.postgresql.postgresql_db:
            name: "{{ dbname }}"
            owner: "{{ dbuser }}"
        - name: Grant user access to db
          community.postgresql.postgresql_pg_hba:
            dest: /etc/postgresql/{{ postgresqlversion }}/main/pg_hba.conf
            contype: host
            users: "{{ dbuser }}"
            databases: "{{ dbname }}"
            method: scram-sha-256
            source: 192.168.56.0/24
            keep_comments_at_rules: true
            comment: "db movie rule"
          register: result_pghba
        - name: register db server on all network interfaces
          community.postgresql.postgresql_set:
            name: listen_addresses
            value: "*"
          register: result_pgconf
        - name: Debug change conf
          ansible.builtin.debug:
            msg: 
              - "{{ result_pghba }}"
              - "{{ result_pgconf }}"
    - name: restart db server
      tags: PGTASK
      ansible.builtin.systemd:
        name: postgresql@{{postgresqlversion}}-main
        state: restarted
      when: result_pghba is changed or result_pgconf is changed


